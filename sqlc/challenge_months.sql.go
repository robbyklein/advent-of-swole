// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: challenge_months.sql

package sqlc

import (
	"context"
)

const createChallengeMonth = `-- name: CreateChallengeMonth :one
INSERT INTO challenge_months (
  month,
  year
) VALUES (
  $1,
  $2
)
RETURNING id, month, year, created_at, updated_at
`

type CreateChallengeMonthParams struct {
	Month int32
	Year  int32
}

func (q *Queries) CreateChallengeMonth(ctx context.Context, arg CreateChallengeMonthParams) (ChallengeMonth, error) {
	row := q.db.QueryRow(ctx, createChallengeMonth, arg.Month, arg.Year)
	var i ChallengeMonth
	err := row.Scan(
		&i.ID,
		&i.Month,
		&i.Year,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteChallengeMonth = `-- name: DeleteChallengeMonth :exec
DELETE FROM challenge_months
WHERE id = $1
`

func (q *Queries) DeleteChallengeMonth(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteChallengeMonth, id)
	return err
}

const getChallengeMonth = `-- name: GetChallengeMonth :one
SELECT id, month, year, created_at, updated_at
FROM challenge_months
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetChallengeMonth(ctx context.Context, id int64) (ChallengeMonth, error) {
	row := q.db.QueryRow(ctx, getChallengeMonth, id)
	var i ChallengeMonth
	err := row.Scan(
		&i.ID,
		&i.Month,
		&i.Year,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChallengeMonthByYearMonth = `-- name: GetChallengeMonthByYearMonth :one
SELECT id, month, year, created_at, updated_at
FROM challenge_months
WHERE year = $1 AND month = $2
LIMIT 1
`

type GetChallengeMonthByYearMonthParams struct {
	Year  int32
	Month int32
}

func (q *Queries) GetChallengeMonthByYearMonth(ctx context.Context, arg GetChallengeMonthByYearMonthParams) (ChallengeMonth, error) {
	row := q.db.QueryRow(ctx, getChallengeMonthByYearMonth, arg.Year, arg.Month)
	var i ChallengeMonth
	err := row.Scan(
		&i.ID,
		&i.Month,
		&i.Year,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDayByMonthIDNumber = `-- name: GetDayByMonthIDNumber :one
SELECT id, challenge_month_id, day_number, created_at, updated_at
FROM days
WHERE challenge_month_id = $1
  AND day_number = $2
LIMIT 1
`

type GetDayByMonthIDNumberParams struct {
	ChallengeMonthID int64
	DayNumber        int32
}

func (q *Queries) GetDayByMonthIDNumber(ctx context.Context, arg GetDayByMonthIDNumberParams) (Day, error) {
	row := q.db.QueryRow(ctx, getDayByMonthIDNumber, arg.ChallengeMonthID, arg.DayNumber)
	var i Day
	err := row.Scan(
		&i.ID,
		&i.ChallengeMonthID,
		&i.DayNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMostRecentChallengeMonth = `-- name: GetMostRecentChallengeMonth :one
SELECT id, month, year, created_at, updated_at
FROM challenge_months
ORDER BY year DESC, month DESC
LIMIT 1
`

func (q *Queries) GetMostRecentChallengeMonth(ctx context.Context) (ChallengeMonth, error) {
	row := q.db.QueryRow(ctx, getMostRecentChallengeMonth)
	var i ChallengeMonth
	err := row.Scan(
		&i.ID,
		&i.Month,
		&i.Year,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listChallengeMonths = `-- name: ListChallengeMonths :many
SELECT id, month, year, created_at, updated_at
FROM challenge_months
ORDER BY year DESC, month DESC
`

func (q *Queries) ListChallengeMonths(ctx context.Context) ([]ChallengeMonth, error) {
	rows, err := q.db.Query(ctx, listChallengeMonths)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChallengeMonth
	for rows.Next() {
		var i ChallengeMonth
		if err := rows.Scan(
			&i.ID,
			&i.Month,
			&i.Year,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChallengeMonth = `-- name: UpdateChallengeMonth :exec
UPDATE challenge_months
SET
  month = $2,
  year = $3,
  updated_at = NOW()
WHERE id = $1
`

type UpdateChallengeMonthParams struct {
	ID    int64
	Month int32
	Year  int32
}

func (q *Queries) UpdateChallengeMonth(ctx context.Context, arg UpdateChallengeMonthParams) error {
	_, err := q.db.Exec(ctx, updateChallengeMonth, arg.ID, arg.Month, arg.Year)
	return err
}
