// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: settings.sql

package sqlc

import (
	"context"
)

const createSettings = `-- name: CreateSettings :one
INSERT INTO settings (
  user_id,
  timezone,
  display_name
) VALUES (
  $1,
  $2,
  $3
)
RETURNING id, user_id, timezone, display_name, created_at, updated_at
`

type CreateSettingsParams struct {
	UserID      int64
	Timezone    string
	DisplayName string
}

func (q *Queries) CreateSettings(ctx context.Context, arg CreateSettingsParams) (Setting, error) {
	row := q.db.QueryRow(ctx, createSettings, arg.UserID, arg.Timezone, arg.DisplayName)
	var i Setting
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Timezone,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSettings = `-- name: DeleteSettings :exec
DELETE FROM settings
WHERE user_id = $1
`

func (q *Queries) DeleteSettings(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteSettings, userID)
	return err
}

const getSettings = `-- name: GetSettings :one
SELECT id, user_id, timezone, display_name, created_at, updated_at
FROM settings
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetSettings(ctx context.Context, userID int64) (Setting, error) {
	row := q.db.QueryRow(ctx, getSettings, userID)
	var i Setting
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Timezone,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSettings = `-- name: UpdateSettings :exec
UPDATE settings
SET
  timezone = $2,
  display_name = $3,
  updated_at = NOW()
WHERE user_id = $1
`

type UpdateSettingsParams struct {
	UserID      int64
	Timezone    string
	DisplayName string
}

func (q *Queries) UpdateSettings(ctx context.Context, arg UpdateSettingsParams) error {
	_, err := q.db.Exec(ctx, updateSettings, arg.UserID, arg.Timezone, arg.DisplayName)
	return err
}
