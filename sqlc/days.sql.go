// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: days.sql

package sqlc

import (
	"context"
)

const createDay = `-- name: CreateDay :one
INSERT INTO days (
  challenge_month_id,
  day_number
) VALUES (
  $1,
  $2
)
RETURNING id, challenge_month_id, day_number, created_at, updated_at
`

type CreateDayParams struct {
	ChallengeMonthID int64
	DayNumber        int32
}

func (q *Queries) CreateDay(ctx context.Context, arg CreateDayParams) (Day, error) {
	row := q.db.QueryRow(ctx, createDay, arg.ChallengeMonthID, arg.DayNumber)
	var i Day
	err := row.Scan(
		&i.ID,
		&i.ChallengeMonthID,
		&i.DayNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDay = `-- name: DeleteDay :exec
DELETE FROM days
WHERE id = $1
`

func (q *Queries) DeleteDay(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteDay, id)
	return err
}

const getDay = `-- name: GetDay :one
SELECT id, challenge_month_id, day_number, created_at, updated_at
FROM days
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetDay(ctx context.Context, id int64) (Day, error) {
	row := q.db.QueryRow(ctx, getDay, id)
	var i Day
	err := row.Scan(
		&i.ID,
		&i.ChallengeMonthID,
		&i.DayNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDaysForMonth = `-- name: ListDaysForMonth :many
SELECT id, challenge_month_id, day_number, created_at, updated_at
FROM days
WHERE challenge_month_id = $1
ORDER BY day_number
`

func (q *Queries) ListDaysForMonth(ctx context.Context, challengeMonthID int64) ([]Day, error) {
	rows, err := q.db.Query(ctx, listDaysForMonth, challengeMonthID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Day
	for rows.Next() {
		var i Day
		if err := rows.Scan(
			&i.ID,
			&i.ChallengeMonthID,
			&i.DayNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDay = `-- name: UpdateDay :exec
UPDATE days
SET
  day_number = $2,
  updated_at = NOW()
WHERE id = $1
`

type UpdateDayParams struct {
	ID        int64
	DayNumber int32
}

func (q *Queries) UpdateDay(ctx context.Context, arg UpdateDayParams) error {
	_, err := q.db.Exec(ctx, updateDay, arg.ID, arg.DayNumber)
	return err
}
