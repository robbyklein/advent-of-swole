// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: stats.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCaloriesStats = `-- name: GetCaloriesStats :many
SELECT 
    d.day_number,
    COALESCE(SUM(c.calories_burned_estimate), 0) AS total_calories
FROM 
    days d
LEFT JOIN 
    day_challenges dc ON d.id = dc.day_id
LEFT JOIN 
    challenges c ON dc.challenge_id = c.id
LEFT JOIN 
    user_challenge_completions ucc ON c.id = ucc.challenge_id AND d.id = ucc.day_id
WHERE 
    d.challenge_month_id = $1
    AND ucc.user_id = $2
GROUP BY 
    d.day_number
ORDER BY 
    d.day_number
`

type GetCaloriesStatsParams struct {
	ChallengeMonthID int64
	UserID           int64
}

type GetCaloriesStatsRow struct {
	DayNumber     int32
	TotalCalories interface{}
}

func (q *Queries) GetCaloriesStats(ctx context.Context, arg GetCaloriesStatsParams) ([]GetCaloriesStatsRow, error) {
	rows, err := q.db.Query(ctx, getCaloriesStats, arg.ChallengeMonthID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCaloriesStatsRow
	for rows.Next() {
		var i GetCaloriesStatsRow
		if err := rows.Scan(&i.DayNumber, &i.TotalCalories); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryStats = `-- name: GetCategoryStats :many
SELECT 
    category,
    COUNT(*) AS count,
    ROUND((COUNT(*) * 100.0) / SUM(COUNT(*)) OVER (), 2) AS percentage
FROM 
    challenges c
JOIN 
    day_challenges dc ON c.id = dc.challenge_id
JOIN 
    days d ON dc.day_id = d.id
WHERE 
    d.challenge_month_id = $1
GROUP BY 
    category
ORDER BY 
    percentage DESC
`

type GetCategoryStatsRow struct {
	Category   string
	Count      int64
	Percentage pgtype.Numeric
}

func (q *Queries) GetCategoryStats(ctx context.Context, challengeMonthID int64) ([]GetCategoryStatsRow, error) {
	rows, err := q.db.Query(ctx, getCategoryStats, challengeMonthID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCategoryStatsRow
	for rows.Next() {
		var i GetCategoryStatsRow
		if err := rows.Scan(&i.Category, &i.Count, &i.Percentage); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMuscleStats = `-- name: GetMuscleStats :many
SELECT 
    UNNEST(muscle_groups) AS muscle_group,
    COUNT(*) AS count,
    ROUND((COUNT(*) * 100.0) / SUM(COUNT(*)) OVER (), 2) AS percentage
FROM 
    challenges c
JOIN 
    day_challenges dc ON c.id = dc.challenge_id
JOIN 
    days d ON dc.day_id = d.id
WHERE 
    d.challenge_month_id = $1
GROUP BY 
    muscle_group
ORDER BY 
    percentage DESC
`

type GetMuscleStatsRow struct {
	MuscleGroup interface{}
	Count       int64
	Percentage  pgtype.Numeric
}

func (q *Queries) GetMuscleStats(ctx context.Context, challengeMonthID int64) ([]GetMuscleStatsRow, error) {
	rows, err := q.db.Query(ctx, getMuscleStats, challengeMonthID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMuscleStatsRow
	for rows.Next() {
		var i GetMuscleStatsRow
		if err := rows.Scan(&i.MuscleGroup, &i.Count, &i.Percentage); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
