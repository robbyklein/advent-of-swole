// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  oauth_provider,
  oauth_provider_id
) VALUES (
  $1,
  $2
)
RETURNING id, oauth_provider, oauth_provider_id, created_at, updated_at
`

type CreateUserParams struct {
	OauthProvider   string
	OauthProviderID string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.OauthProvider, arg.OauthProviderID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OauthProvider,
		&i.OauthProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, oauth_provider, oauth_provider_id, created_at, updated_at
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OauthProvider,
		&i.OauthProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByProviderId = `-- name: GetUserByProviderId :one
SELECT id, oauth_provider, oauth_provider_id, created_at, updated_at
FROM users
WHERE oauth_provider = $1 AND oauth_provider_id = $2
LIMIT 1
`

type GetUserByProviderIdParams struct {
	OauthProvider   string
	OauthProviderID string
}

func (q *Queries) GetUserByProviderId(ctx context.Context, arg GetUserByProviderIdParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByProviderId, arg.OauthProvider, arg.OauthProviderID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OauthProvider,
		&i.OauthProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, oauth_provider, oauth_provider_id, created_at, updated_at
FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.OauthProvider,
			&i.OauthProviderID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
  oauth_provider = $2,
  oauth_provider_id = $3,
  updated_at = NOW()
WHERE id = $1
`

type UpdateUserParams struct {
	ID              int64
	OauthProvider   string
	OauthProviderID string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.ID, arg.OauthProvider, arg.OauthProviderID)
	return err
}
