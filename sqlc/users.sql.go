// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email,
  password_hash
) VALUES (
  $1,
  $2
)
RETURNING id, email, password_hash, created_at, updated_at, confirmed_at, confirmation_token, confirmation_sent_at, reset_password_token, reset_password_sent_at
`

type CreateUserParams struct {
	Email        string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ConfirmedAt,
		&i.ConfirmationToken,
		&i.ConfirmationSentAt,
		&i.ResetPasswordToken,
		&i.ResetPasswordSentAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password_hash, created_at, updated_at, confirmed_at, confirmation_token, confirmation_sent_at, reset_password_token, reset_password_sent_at
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ConfirmedAt,
		&i.ConfirmationToken,
		&i.ConfirmationSentAt,
		&i.ResetPasswordToken,
		&i.ResetPasswordSentAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, created_at, updated_at, confirmed_at, confirmation_token, confirmation_sent_at, reset_password_token, reset_password_sent_at
FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ConfirmedAt,
		&i.ConfirmationToken,
		&i.ConfirmationSentAt,
		&i.ResetPasswordToken,
		&i.ResetPasswordSentAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, password_hash, created_at, updated_at, confirmed_at, confirmation_token, confirmation_sent_at, reset_password_token, reset_password_sent_at
FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ConfirmedAt,
			&i.ConfirmationToken,
			&i.ConfirmationSentAt,
			&i.ResetPasswordToken,
			&i.ResetPasswordSentAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
  email = $2,
  password_hash = $3,
  updated_at = NOW()
WHERE id = $1
`

type UpdateUserParams struct {
	ID           int64
	Email        string
	PasswordHash string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.ID, arg.Email, arg.PasswordHash)
	return err
}
