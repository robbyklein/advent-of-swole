// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: challenges.sql

package sqlc

import (
	"context"
)

const createChallenge = `-- name: CreateChallenge :one
INSERT INTO challenges (
  description,
  description_metric,
  category,
  muscle_groups,
  difficulty,
  calories_burned_estimate
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6
)
RETURNING id, description, description_metric, category, muscle_groups, difficulty, calories_burned_estimate, created_at, updated_at, points
`

type CreateChallengeParams struct {
	Description            string
	DescriptionMetric      string
	Category               string
	MuscleGroups           []string
	Difficulty             int32
	CaloriesBurnedEstimate int32
}

func (q *Queries) CreateChallenge(ctx context.Context, arg CreateChallengeParams) (Challenge, error) {
	row := q.db.QueryRow(ctx, createChallenge,
		arg.Description,
		arg.DescriptionMetric,
		arg.Category,
		arg.MuscleGroups,
		arg.Difficulty,
		arg.CaloriesBurnedEstimate,
	)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.DescriptionMetric,
		&i.Category,
		&i.MuscleGroups,
		&i.Difficulty,
		&i.CaloriesBurnedEstimate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Points,
	)
	return i, err
}

const deleteChallenge = `-- name: DeleteChallenge :exec
DELETE FROM challenges
WHERE id = $1
`

func (q *Queries) DeleteChallenge(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteChallenge, id)
	return err
}

const getChallenge = `-- name: GetChallenge :one
SELECT id, description, description_metric, category, muscle_groups, difficulty, calories_burned_estimate, created_at, updated_at, points
FROM challenges
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetChallenge(ctx context.Context, id int64) (Challenge, error) {
	row := q.db.QueryRow(ctx, getChallenge, id)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.DescriptionMetric,
		&i.Category,
		&i.MuscleGroups,
		&i.Difficulty,
		&i.CaloriesBurnedEstimate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Points,
	)
	return i, err
}

const getChallengeByDescription = `-- name: GetChallengeByDescription :one
SELECT id, description, description_metric, category, muscle_groups, difficulty, calories_burned_estimate, created_at, updated_at, points
FROM challenges
WHERE description = $1
LIMIT 1
`

func (q *Queries) GetChallengeByDescription(ctx context.Context, description string) (Challenge, error) {
	row := q.db.QueryRow(ctx, getChallengeByDescription, description)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.DescriptionMetric,
		&i.Category,
		&i.MuscleGroups,
		&i.Difficulty,
		&i.CaloriesBurnedEstimate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Points,
	)
	return i, err
}

const listChallenges = `-- name: ListChallenges :many
SELECT id, description, description_metric, category, muscle_groups, difficulty, calories_burned_estimate, created_at, updated_at, points
FROM challenges
ORDER BY id
`

func (q *Queries) ListChallenges(ctx context.Context) ([]Challenge, error) {
	rows, err := q.db.Query(ctx, listChallenges)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Challenge
	for rows.Next() {
		var i Challenge
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.DescriptionMetric,
			&i.Category,
			&i.MuscleGroups,
			&i.Difficulty,
			&i.CaloriesBurnedEstimate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Points,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChallenge = `-- name: UpdateChallenge :exec
UPDATE challenges
SET
  description = $2,
  description_metric = $3,
  category = $4,
  muscle_groups = $5,
  difficulty = $6,
  calories_burned_estimate = $7,
  updated_at = NOW()
WHERE id = $1
`

type UpdateChallengeParams struct {
	ID                     int64
	Description            string
	DescriptionMetric      string
	Category               string
	MuscleGroups           []string
	Difficulty             int32
	CaloriesBurnedEstimate int32
}

func (q *Queries) UpdateChallenge(ctx context.Context, arg UpdateChallengeParams) error {
	_, err := q.db.Exec(ctx, updateChallenge,
		arg.ID,
		arg.Description,
		arg.DescriptionMetric,
		arg.Category,
		arg.MuscleGroups,
		arg.Difficulty,
		arg.CaloriesBurnedEstimate,
	)
	return err
}
