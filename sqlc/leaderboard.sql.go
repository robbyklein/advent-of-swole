// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: leaderboard.sql

package sqlc

import (
	"context"
)

const getLeaderboard = `-- name: GetLeaderboard :many
SELECT 
    u.id AS user_id,
    u.display_name::TEXT AS display_name,
    u.email::TEXT AS email,
    COALESCE(SUM(c.points), 0)::INTEGER AS total_points
FROM 
    users u
LEFT JOIN 
    user_challenge_completions ucc ON u.id = ucc.user_id
LEFT JOIN 
    challenges c ON ucc.challenge_id = c.id
LEFT JOIN 
    days d ON ucc.day_id = d.id
WHERE 
    d.challenge_month_id = $1
GROUP BY 
  u.id, u.display_name, u.email
ORDER BY 
    total_points DESC
LIMIT $2
`

type GetLeaderboardParams struct {
	ChallengeMonthID int64
	Limit            int32
}

type GetLeaderboardRow struct {
	UserID      int64
	DisplayName string
	Email       string
	TotalPoints int32
}

func (q *Queries) GetLeaderboard(ctx context.Context, arg GetLeaderboardParams) ([]GetLeaderboardRow, error) {
	rows, err := q.db.Query(ctx, getLeaderboard, arg.ChallengeMonthID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLeaderboardRow
	for rows.Next() {
		var i GetLeaderboardRow
		if err := rows.Scan(
			&i.UserID,
			&i.DisplayName,
			&i.Email,
			&i.TotalPoints,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
