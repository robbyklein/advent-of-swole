// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: leaderboard.sql

package sqlc

import (
	"context"
)

const getLeaderboard = `-- name: GetLeaderboard :many
SELECT 
  u.id AS user_id,
  u.display_name::TEXT AS display_name, -- Use the display_name field from the users table
  COALESCE(SUM(c.points), 0) AS total_points
FROM 
  users u
LEFT JOIN 
  user_challenge_completions ucc ON u.id = ucc.user_id
LEFT JOIN 
  challenges c ON ucc.challenge_id = c.id
GROUP BY 
  u.id, u.display_name
ORDER BY 
  total_points DESC
LIMIT $1
`

type GetLeaderboardRow struct {
	UserID      int64
	DisplayName string
	TotalPoints interface{}
}

func (q *Queries) GetLeaderboard(ctx context.Context, limit int32) ([]GetLeaderboardRow, error) {
	rows, err := q.db.Query(ctx, getLeaderboard, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLeaderboardRow
	for rows.Next() {
		var i GetLeaderboardRow
		if err := rows.Scan(&i.UserID, &i.DisplayName, &i.TotalPoints); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
