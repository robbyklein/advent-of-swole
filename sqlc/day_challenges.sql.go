// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: day_challenges.sql

package sqlc

import (
	"context"
)

const linkChallengeToDay = `-- name: LinkChallengeToDay :exec
INSERT INTO day_challenges (
  day_id,
  challenge_id
) VALUES (
  $1,
  $2
)
`

type LinkChallengeToDayParams struct {
	DayID       int64
	ChallengeID int64
}

func (q *Queries) LinkChallengeToDay(ctx context.Context, arg LinkChallengeToDayParams) error {
	_, err := q.db.Exec(ctx, linkChallengeToDay, arg.DayID, arg.ChallengeID)
	return err
}

const listChallengesForDay = `-- name: ListChallengesForDay :many
SELECT c.id, c.description, c.description_metric, c.category, c.muscle_groups, c.difficulty, c.calories_burned_estimate, c.created_at, c.updated_at, c.points
FROM challenges c
JOIN day_challenges dc ON c.id = dc.challenge_id
WHERE dc.day_id = $1
ORDER BY c.id
`

func (q *Queries) ListChallengesForDay(ctx context.Context, dayID int64) ([]Challenge, error) {
	rows, err := q.db.Query(ctx, listChallengesForDay, dayID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Challenge
	for rows.Next() {
		var i Challenge
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.DescriptionMetric,
			&i.Category,
			&i.MuscleGroups,
			&i.Difficulty,
			&i.CaloriesBurnedEstimate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Points,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDaysForChallenge = `-- name: ListDaysForChallenge :many
SELECT d.id, d.challenge_month_id, d.day_number, d.created_at, d.updated_at
FROM days d
JOIN day_challenges dc ON d.id = dc.day_id
WHERE dc.challenge_id = $1
ORDER BY d.day_number
`

func (q *Queries) ListDaysForChallenge(ctx context.Context, challengeID int64) ([]Day, error) {
	rows, err := q.db.Query(ctx, listDaysForChallenge, challengeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Day
	for rows.Next() {
		var i Day
		if err := rows.Scan(
			&i.ID,
			&i.ChallengeMonthID,
			&i.DayNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unlinkChallengeFromDay = `-- name: UnlinkChallengeFromDay :exec
DELETE FROM day_challenges
WHERE day_id = $1 AND challenge_id = $2
`

type UnlinkChallengeFromDayParams struct {
	DayID       int64
	ChallengeID int64
}

func (q *Queries) UnlinkChallengeFromDay(ctx context.Context, arg UnlinkChallengeFromDayParams) error {
	_, err := q.db.Exec(ctx, unlinkChallengeFromDay, arg.DayID, arg.ChallengeID)
	return err
}
