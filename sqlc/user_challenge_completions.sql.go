// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_challenge_completions.sql

package sqlc

import (
	"context"
)

const completeChallenge = `-- name: CompleteChallenge :exec
INSERT INTO user_challenge_completions (
  user_id,
  challenge_id,
  day_id
) VALUES (
  $1,
  $2,
  $3
)
ON CONFLICT DO NOTHING
`

type CompleteChallengeParams struct {
	UserID      int64
	ChallengeID int64
	DayID       int64
}

func (q *Queries) CompleteChallenge(ctx context.Context, arg CompleteChallengeParams) error {
	_, err := q.db.Exec(ctx, completeChallenge, arg.UserID, arg.ChallengeID, arg.DayID)
	return err
}

const getCompletedChallengesForUser = `-- name: GetCompletedChallengesForUser :many
SELECT challenge_id
FROM user_challenge_completions
WHERE user_id = $1 AND day_id = $2
`

type GetCompletedChallengesForUserParams struct {
	UserID int64
	DayID  int64
}

func (q *Queries) GetCompletedChallengesForUser(ctx context.Context, arg GetCompletedChallengesForUserParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, getCompletedChallengesForUser, arg.UserID, arg.DayID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var challenge_id int64
		if err := rows.Scan(&challenge_id); err != nil {
			return nil, err
		}
		items = append(items, challenge_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
